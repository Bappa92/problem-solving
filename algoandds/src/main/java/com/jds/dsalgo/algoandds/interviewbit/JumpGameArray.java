package com.jds.dsalgo.algoandds.interviewbit;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Given an array of non-negative integers, A, you are initially positioned at
 * the first index of the array.
 * 
 * Each element in the array represents your maximum jump length at that
 * position.
 * 
 * Determine if you are able to reach the last index. Input 1: A = [2,3,1,1,4]
 * 
 * Output 1: 1
 * 
 * Explanation 1: Index 0 -> Index 2 -> Index 3 -> Index 4 -> Index 5
 * 
 * Input 2: A = [3,2,1,0,4]
 * 
 * Output 2: 0
 * 
 * Explanation 2: There is no possible path to reach the last index.
 * 
 * @author Bappa
 *
 */
public class JumpGameArray {

	public static void main(String[] args) {
		Stream<Integer> streamInt = Stream.of(22, 0, 0, 3, 6, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 5, 22, 12, 0, 12, 0, 9, 11, 0, 0, 21, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
				23, 0, 19, 0, 19, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 26, 0, 28, 3, 0, 0, 0,
				19, 0, 0, 15, 0, 0, 14, 0, 0, 0, 0, 0, 7, 0, 14, 0, 16, 0, 19, 2, 16, 0, 29, 12, 0, 0, 0, 0, 29, 12, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 21, 9, 9, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 30, 0, 25, 7, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 8, 0, 20, 30, 29, 0, 23, 17, 0, 0, 20, 0, 0, 0, 3, 17, 10, 0, 0, 0, 0, 0, 0, 15, 0, 0, 6, 0, 0, 0, 0,
				0, 11, 2, 27, 0, 22, 0, 8, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 30, 25, 0, 0, 0, 0,
				9, 29, 0, 0, 0, 0, 0, 1, 0, 16, 27, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0, 6, 0, 0, 0, 16, 0,
				3, 0, 20, 10, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 3, 0, 17, 0, 0, 4, 5, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 29, 0, 10, 0, 0, 0, 5, 21, 15, 0, 0, 0, 23, 0, 17, 0, 0, 24, 0, 0, 7, 11, 1, 27, 0, 9,
				20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 28, 0, 0, 0, 23, 0, 0, 0, 22, 0, 0, 3,
				0, 17, 1, 19, 0, 0, 18, 0, 23, 0, 0, 0, 0, 13, 19, 24, 13, 0, 0, 0, 0, 0, 0, 3, 28, 0, 0, 5, 21, 0, 0,
				0, 0, 0, 6, 0, 0, 0, 19, 0, 0, 0, 11, 5, 0, 0, 0, 24, 21, 0, 0, 0, 19, 0, 0, 0, 0, 10, 0, 17, 0, 0, 0,
				2, 0, 24, 13, 1, 22, 0, 0, 15, 0, 21, 0, 21, 0, 0, 7, 0, 0, 0, 23, 6, 0, 0, 20, 24, 23, 0, 0, 0, 0, 28,
				0, 8, 0, 0, 30, 23, 22, 11, 0, 0, 0, 1, 20, 0, 0, 5, 0, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 17, 0, 0,
				12, 0, 0, 18, 0, 0, 0, 0, 0, 17, 2, 7, 0, 0, 0, 0, 0, 5, 16, 0, 0, 0, 0, 16, 0, 0, 8, 0, 0, 1, 25, 14,
				1, 24, 19, 0, 0, 0, 0, 0, 24, 7, 0, 0, 0, 0, 21, 0, 0, 0, 0, 17, 0, 0, 0, 0, 8, 0, 0, 15, 0, 0, 9, 0, 0,
				8, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 13, 20, 0, 26, 0, 0, 0, 2, 0, 28, 0, 0, 0, 0, 0, 11, 0, 27, 0, 0, 10,
				19, 0, 0, 0, 0, 13, 25, 30, 28, 28, 0, 21, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 22, 0,
				1, 0, 0, 0, 0, 0, 9, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 14, 29, 0, 4, 0, 12, 0, 0, 0, 0, 25, 0, 0, 29, 0,
				21, 8, 0, 0, 0, 0, 0, 0, 0, 0, 28, 7, 5, 0, 0, 6, 0, 24, 11, 0, 11, 20, 6, 30, 21, 0, 8, 0, 0, 28, 28,
				4, 0, 17, 0, 6, 22, 0, 27, 0, 0, 0, 0, 29, 26, 0, 6, 0, 8, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 20, 0, 0, 0, 5, 21, 2, 0, 0, 0, 28, 0, 0, 20, 0, 0, 7, 0, 0, 25, 0, 0);
		System.out.println(canJump(streamInt.collect(Collectors.toList())));
	}

	public static int canJump(List<Integer> A) {
		int i = 1;
		int reach = A.get(0);
		while (i < A.size() - 1 && reach > 0 && (i++ + reach) < A.size() - 1) {
			reach--;
			reach = Math.max(A.get(i), reach);
		}
		if (i + reach >= A.size() - 1) {
			return 1;
		} else {
			return 0;
		}
	}
}
